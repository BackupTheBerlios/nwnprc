/*
 * BonusFeatMenu.java
 *
 * Created on April 13, 2003, 6:16 PM
 */

package CharacterCreator;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import CharacterCreator.WordWrap;
/**
 *
 * @author  James
 */
public class BonusFeatMenu extends javax.swing.JFrame implements ActionListener {
    
	// Call back for FeatButton
	public void actionPerformed(ActionEvent evt) {
		Feat feat = ((FeatButton.InternalFeatButton)evt.getSource()).Feat();
		int index = featlist.indexOf(feat);
		int featsleft = Integer.parseInt(FeatRemainingText.getText());

		if (index == -1) {
			featlist.add(feat);
			--featsleft;
		}
		else {
			featlist.remove(feat);
			++featsleft;
		}

		FeatRemainingText.setText(Integer.toString(featsleft));
		RefreshFeatAvailable();
		RefreshFeatSelected();
	}
    
    /** Creates new form BonusFeatMenu */
    public BonusFeatMenu(ArrayList _bonusfeatlist, int _numfeats) {
		bonusfeatlist = _bonusfeatlist;
		numfeats = _numfeats;

        int i;
        menucreate = TLKFactory.getCreateMenu();
        initComponents();
        
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        menucreate.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        if ( (screenSize.getWidth() > getContentPane().getWidth()) && (screenSize.getHeight() > getContentPane().getHeight())) {
            int intwidth = new Double(((screenSize.getWidth()-getContentPane().getWidth())/2)).intValue();
            int intheight = new Double(((screenSize.getHeight()-getContentPane().getHeight())/2)).intValue();
            setLocation(intwidth, intheight);
        } else {
            setLocation(0,0);
        }
        
        featlist = new ArrayList();
        
        TLKFAC = menucreate.getTLKFactory();
        RESFAC = menucreate.getResourceFactory();
        
		featmap = FeatMap.GetFeatMap();
        
        FeatRemainingText.setText(Integer.toString(numfeats));
        RefreshFeatAvailable();
        RefreshFeatSelected();
        
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        menucreate.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        
        pack();
    }
    
    private void RefreshFeatSelected() {
        int i;
        FeatSelectedButtonList.removeAll();
		for(i = 0; i < featlist.size(); i++) {
			Feat feat = (Feat)featlist.get(i);
			FeatSelectedButtonList.add(
					new FeatButton(feat, true, this), -1
				);
		}
        pack();
    }
    
    private void RefreshFeatAvailable() {
        FeatAvailableButtonList.removeAll();

		if(Integer.parseInt(FeatRemainingText.getText()) > 0) {
			ArrayList al = new ArrayList();

			for(int ii = 0; ii < bonusfeatlist.size(); ++ii)
				if(!featlist.contains(bonusfeatlist.get(ii)))
					al.add(bonusfeatlist.get(ii));

			Collections.sort(al);
			for (int ii = 0; ii < al.size(); ++ii) {
				FeatButton featbutton = new FeatButton((Feat)bonusfeatlist.get(ii), true, this);
				FeatAvailableButtonList.add(featbutton, -1);
			}
		}
        pack();
    }
    
    private void DoRecommended() {
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        menucreate.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        
        DoReset();

		// Ranger Favored Enemy
		if(Integer.parseInt(menucreate.MainCharDataAux[3][0]) == 7) {	
			//Goblinoid
			featlist.add(featmap[273]);
		}
		// Crude but simple fallback
		else
			featlist.add(((Feat)bonusfeatlist.get(0)).Index());

        FeatRemainingText.setText("0");
        RefreshFeatAvailable();
        RefreshFeatSelected();
        
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        menucreate.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }
    
    private void DoReset() {
        featlist = new ArrayList();
        FeatRemainingText.setText(Integer.toString(numfeats));
        RefreshFeatAvailable();
        RefreshFeatSelected();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        FeatButtonContainer = new javax.swing.JScrollPane();
        FeatButtonBak = new javax.swing.JPanel();
        FeatSelectedButtonList = new javax.swing.JPanel();
        FeatButtonContainer1 = new javax.swing.JScrollPane();
        FeatButtonBak1 = new javax.swing.JPanel();
        FeatAvailableButtonList = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        FeatAvailableLabel = new javax.swing.JLabel();
        FeatSelectedTable = new javax.swing.JLabel();
        FeatRemainingText = new javax.swing.JTextField();
        RecommendedButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Select a Bonus Feat");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        FeatButtonContainer.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        FeatButtonContainer.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        FeatButtonContainer.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(10, 10, 10, 10), new java.awt.Color(153, 153, 0)));
        FeatButtonContainer.setMaximumSize(new java.awt.Dimension(32767, 300));
        FeatButtonContainer.setPreferredSize(new java.awt.Dimension(373, 300));
        FeatButtonContainer.setAutoscrolls(true);
		FeatButtonContainer.getVerticalScrollBar().setUnitIncrement(52);
		FeatButtonContainer.getVerticalScrollBar().setBlockIncrement(52);
        FeatButtonBak.setLayout(new java.awt.GridBagLayout());

        FeatButtonBak.setBackground(new java.awt.Color(0, 0, 0));
        FeatButtonBak.setForeground(new java.awt.Color(255, 255, 255));
        FeatButtonBak.setAlignmentX(0.0F);
        FeatButtonBak.setAlignmentY(0.0F);
        FeatButtonBak.setAutoscrolls(true);
        FeatSelectedButtonList.setLayout(new java.awt.GridLayout(0, 1));

        FeatSelectedButtonList.setBackground(new java.awt.Color(0, 0, 0));
        FeatSelectedButtonList.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        FeatButtonBak.add(FeatSelectedButtonList, gridBagConstraints);

        FeatButtonContainer.setViewportView(FeatButtonBak);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(FeatButtonContainer, gridBagConstraints);

        FeatButtonContainer1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        FeatButtonContainer1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        FeatButtonContainer1.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(10, 10, 10, 10), new java.awt.Color(153, 153, 0)));
        FeatButtonContainer1.setMaximumSize(new java.awt.Dimension(32767, 300));
        FeatButtonContainer1.setPreferredSize(new java.awt.Dimension(373, 300));
        FeatButtonContainer1.setAutoscrolls(true);
		FeatButtonContainer1.getVerticalScrollBar().setUnitIncrement(52);
		FeatButtonContainer1.getVerticalScrollBar().setBlockIncrement(52);
        FeatButtonBak1.setLayout(new java.awt.GridBagLayout());

        FeatButtonBak1.setBackground(new java.awt.Color(0, 0, 0));
        FeatButtonBak1.setForeground(new java.awt.Color(255, 255, 255));
        FeatButtonBak1.setAlignmentX(0.0F);
        FeatButtonBak1.setAlignmentY(0.0F);
        FeatButtonBak1.setAutoscrolls(true);
        FeatAvailableButtonList.setLayout(new java.awt.GridLayout(0, 1));

        FeatAvailableButtonList.setBackground(new java.awt.Color(0, 0, 0));
        FeatAvailableButtonList.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        FeatButtonBak1.add(FeatAvailableButtonList, gridBagConstraints);

        FeatButtonContainer1.setViewportView(FeatButtonBak1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(FeatButtonContainer1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        getContentPane().add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        getContentPane().add(jPanel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel13, gridBagConstraints);

        FeatAvailableLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 10));
        FeatAvailableLabel.setText("Available Bonus Feats");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(FeatAvailableLabel, gridBagConstraints);

        FeatSelectedTable.setFont(new java.awt.Font("Trebuchet MS", 0, 10));
        FeatSelectedTable.setText("Selected Feat(s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(FeatSelectedTable, gridBagConstraints);

        FeatRemainingText.setEditable(false);
        FeatRemainingText.setFont(new java.awt.Font("Trebuchet MS", 0, 10));
        FeatRemainingText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FeatRemainingText.setText("0");
        FeatRemainingText.setBorder(null);
        FeatRemainingText.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        FeatRemainingText.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(FeatRemainingText, gridBagConstraints);

        RecommendedButton.setText("Recommended");
        RecommendedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecommendedButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(RecommendedButton, gridBagConstraints);

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(ResetButton, gridBagConstraints);

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(OKButton, gridBagConstraints);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(CancelButton, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        // Add your handling code here:
        DoReset();
    }//GEN-LAST:event_ResetButtonActionPerformed
    
    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed
    
    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        if(Integer.parseInt(FeatRemainingText.getText()) > 0)
            DoRecommended();
        
		// This should take into account the possibility of having more than 1 feat to append
        int numberfeats = ((Integer)menucreate.MainCharData[9].get(new Integer(0))).intValue();
        menucreate.MainCharData[9].put(new Integer(numberfeats+1),((Feat)featlist.get(0)).Index());
        menucreate.MainCharData[9].put(new Integer(0),new Integer(numberfeats + 1));
        
        //Put handling code here to check to see what menu goes next.
        //First of all, determine whether or not the character is a spellcaster AT ALL.
        if(menucreate.MainCharDataAux[3][15] != null && menucreate.MainCharDataAux[3][15].equalsIgnoreCase("1")) {
            //You ARE a spell caster. Arcane or divine?
            if(menucreate.MainCharDataAux[7][7] != null) {
                //ARCANE = true
                //Can you specialize?
                System.out.println("Data in 7:6: " + menucreate.MainCharDataAux[3][14]);
                if(menucreate.MainCharDataAux[3][14] == null) {
                    //Yes. Wizard class.
                    (new SchoolMenu()).show();
                    setVisible(false);
                    dispose();
                    return;
                } else {
                    //No. Other caster
                    (new SpellMenu()).show();
                    setVisible(false);
                    dispose();
                    return;
                }
            } else {
                //DIVINE = true
                //Do you have 2 domains?
                if(menucreate.MainCharDataAux[7][7] != null
						|| menucreate.MainCharDataAux[7][8] != null) {
                    (new DomainMenu()).show();
                    setVisible(false);
                    dispose();
                    return;
                }
                //You are not a cleric type, so you don't care about domains
                //You have all clerical spells, or spells for your class
            }
        }
        //Spellcaster = false
        menucreate.MainCharData[14] = new HashMap();
        //Animal companion
		boolean companion = menucreate.MainCharData[9].containsValue(new Integer(199));
		boolean familiar = menucreate.MainCharData[9].containsValue(new Integer(303));
        if(companion) {	// This will eventually handle the familar case as well
            (new CompanionMenu()).show();
            setVisible(false);
            dispose();
            return;
        }
		else if(familiar) {
            (new FamiliarMenu()).show();
            setVisible(false);
            dispose();
            return;
        }
        menucreate.CustomizeButton.setEnabled(true);
        
        //Must be a fighter, or something else boring
        menucreate.RedoAll();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_OKButtonActionPerformed
    
    private void RecommendedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecommendedButtonActionPerformed
        // Add your handling code here:
        DoRecommended();
    }//GEN-LAST:event_RecommendedButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        setVisible(false);
        dispose();
    }//GEN-LAST:event_exitForm
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JPanel FeatAvailableButtonList;
    private javax.swing.JLabel FeatAvailableLabel;
    private javax.swing.JPanel FeatButtonBak;
    private javax.swing.JPanel FeatButtonBak1;
    private javax.swing.JScrollPane FeatButtonContainer;
    private javax.swing.JScrollPane FeatButtonContainer1;
    private javax.swing.JTextField FeatRemainingText;
    private javax.swing.JPanel FeatSelectedButtonList;
    private javax.swing.JLabel FeatSelectedTable;
    private javax.swing.JButton OKButton;
    private javax.swing.JButton RecommendedButton;
    private javax.swing.JButton ResetButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    private int CLASSNUM;
    private TLKFactory TLKFAC;
    private ResourceFactory RESFAC;
    private CreateMenu menucreate;
	private Feat[] featmap;

	// Number and List of available feats (Feat).
    private int numfeats;
    private ArrayList bonusfeatlist;

	// List of Feats chosen so far (Feat).
    private ArrayList featlist;
}
